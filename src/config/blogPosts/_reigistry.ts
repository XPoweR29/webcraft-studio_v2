import { PostPageConfig } from '@/types/blog.type';
import { DLACZEGO_TWOJA_FIRMA_POTRZEBUJE_PROFESJONALNEJ_STRONY } from './dlaczego-twoja-firma-potrzebuje-profesjonalnej-strony-internetowej.config';
import { DRUGI_WPIS } from './drugi-wpis.config';
import { TRZECI } from './trzeci.config';

export const BLOG_POSTS: PostPageConfig[] = [
	DLACZEGO_TWOJA_FIRMA_POTRZEBUJE_PROFESJONALNEJ_STRONY,
	DRUGI_WPIS,
	TRZECI
];

//NOTE Dodawanie klejnego wpisu:
// 1 - dodaj nowy plik .tsx do /blogPosts
// 2 - uzupe≈Çnij odpowiednio configa
// 3 - dodaj nowƒÖ stronƒô do rejestru
/**
 * üß≠ ZASADA DZIA≈ÅANIA BLOGA (Next.js App Router)
 * ----------------------------------------------
 *
 * 1Ô∏è‚É£ STRUKTURA
 * - /config/blogPosts/ ‚Üí pojedyncze wpisy (.config.tsx)
 * - /config/reigistry.ts ‚Üí lista wszystkich wpis√≥w (BLOG_POSTS)
 * - /utils/getBlogData.ts ‚Üí helpery (pseudo-API)
 * - /app/blog/page.tsx ‚Üí lista wpis√≥w (grid)
 * - /app/blog/[slug]/page.tsx ‚Üí pojedynczy wpis
 *
 * 2Ô∏è‚É£ GENEROWANIE (SSG)
 * - `generateStaticParams()` pobiera wszystkie slugi z BLOG_POSTS.
 * - Next.js generuje statycznie ka≈ºdƒÖ stronƒô `/blog/[slug]` + `/blog`.
 * ‚úÖ szybkie ≈Çadowanie, SEO-friendly, bez runtime fetchy.
 *
 * 3Ô∏è‚É£ RENDEROWANIE
 * - `/blog` ‚Üí `getAllBlogPreviews()` ‚Üí render kart z danych preview.
 * - `/blog/[slug]` ‚Üí `getBlogPostBySlug(slug)` ‚Üí render pe≈Çnego wpisu.
 *
 * 4Ô∏è‚É£ METADANE (opcjonalnie)
 * - `generateMetadata()` mo≈ºe zwracaƒá `title` i `description` z `post.metadata`.
 * - Mo≈ºna dodaƒá schema.org typu `"BlogPosting"` dla rich snippets.
 *
 * 5Ô∏è‚É£ ROZBUDOWA / MIGRACJA
 * - Obecnie dane lokalne (configi).
 * - P√≥≈∫niej wystarczy podmieniƒá helpery ‚Üí zapytania do API / MySQL.
 * ‚úÖ bez zmian w strukturze i komponentach frontu.
 */
